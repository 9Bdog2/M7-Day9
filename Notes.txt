//Socket IO

//npm i socket.io-client

//npx create-react-app chat-ts --template typescript

//create Home component 
//create component folder 

//import bootstrap
//Home component
import {io} from "socket.io-client"

//Steps happening 
//1)io establishes the connection to the server
//2) if everything goes well, the connection succeed
//3)if the connection succeeds, the server will send to the client a "connect"
//4)the client catches this "connect" event with the .on() and prints out
//5)the client now is able to send its username to the server, that's done with 
//6)the .emit() method send an event to the server , with a type (string) and 
//7) if the server receives the username correctly, will respondus back with a logged in event
//8)the client sets also a bear trap (an event listener with .on() for the loggedin)
//9)in the meanwhile we're keeping a "loggedIn" state variable up-to-date



const ADDRESS = "http://localhost:3030"
const socket = io(ADRESS,{transports: ["websocket"]})



const Home = () => {

const [username, setUsername] = useState("")
const [message, setMessage] = useState("")
const [loggedIn, setLoggedIn] = useState(false)
const [onlineUsers, setOnlineUsers] = useState<IUser[]>([])
const [chatHistory, setChatHistory] = useState<IMessage[]>([])

//socket.io (both FE and BE) is an event driven library 
//the first event that happens when a client connects to the server 
//is a "connect" event: this is by default
//so , if the client establishes successfully a connection with the server
//using io(), will receive back from the server a "connect" event
//so our duty, from the FE, will be to send events and set up event listneres when we receive from our server
//socket is a instance of our connection with the server
//our event listeners for anything that will come from the server
//are going to be set just once, when the application loads




useEffect(() => {
	socket.on("connect", () => {
		console.log("Connection is now established! ")	
	})
	socket.on("loggedin", () =>{
		//the "loggedin" event is sent by the server if the username
		//submission went well
		console.log("username registered")
		setLoggedIn(true)
		
	})
		fetchOnlineUsers()
	socket.on("newConnection", () => {
		// new connection is an event sent to all the other clients but the one which just connected
		console.log("a new user just connected")
		fetchOnlineUsers()
	})	
}, [])

const fetchOnlineUsers = async () =>{
	try{
		let response = await fetch(ADRESS ? "/online-users")
		if(respoonse.ok){
			let {onlineUsers}: {onlineUsers: IUser[]} = await response.json()
			//data is an object with online users into it, which is the array of users
			//destructuring
			//let data = await response.json()
			//let onlineUsers: IUser[] = data.onlineUsers
			//setOnlineUsers(onlineUsers)
			
		}else
		{
			console.log("error")
		}	
	}
	catch(error){
	console.log(error)
	}
}


const submitUsername = (e: FormEvent)=>{
	e.preventDefault()
	//when this submission happens , i want to send to the server my username!
	//i need to send an event 
	socket.emit("setUsername",  {username: username })
	//how can i know if my username at this point has been sent successfully?
	//because in that case, the server is programmed to send me an event back 
	//so in this case i should receive back an event of type "logged in"
	
}

const handleSubmitMessage = (e: FormEvent) =>{
	e.preventDefault()
	//message properties
	//text ->content of the mssage, a string
	//sender -> the sender of the message, a string
	//timestamp : -> the timestamp, a number 
	//id -> the id of this client -server connection, a string
	const newMessage: IMessage = {
		text: message, 
		sender: username,
		id: socket.id,
		timestamp: Date.now()
	}
	socket.emit("sendMessage", newMessage)
	setChatHistory([...chatHistory, newMessage])
	//this will take care of updating just my view
	setMessage("")
}

	return (
		<Container fluid className="px-4">
		<Row classname="my-3" style={{height: "95vh"}}>
			<Col md={10} className="d-flex flex-column justify-content-between">
				<Form onSubmit={() => {submitUsername}}>
				<FormControl placeholder="Insert" value = {username} onChange={e => setMessage(e.target.value)} disabled={loggedIn}/>
				</Form>
				//Messages Area
				<ListGroup>
					{
					chatHistory.map((message)=>(
						....
						))
					}
				</ListGroup>
			</Col>
			<Col md={2}>
				<div className="mb-3">
					Connected Users:
				</div>	
				<ListGroup>
					{...//no users yet}
					{
						onlineUsers.map(user => (<ListGroup.Item key= {user.id}>{user.username}))
					}
				</ListGroup>
			</Col>
		</Row>
		</Container>
	)
}

export default Home

//Create folder named Types
//Createuser.ts

interface IUser {
	id: string
	username: string
}

export default IUser

//create message.ts

interface IMessage {
	text:string
	sender:string
	timestamp:number
	id:string
}

export default IMessage

